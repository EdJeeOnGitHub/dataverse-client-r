% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_file_as_dataframe.R
\name{get_dataframe_by_name}
\alias{get_dataframe_by_name}
\alias{get_dataframe_by_id}
\alias{get_dataframe_by_doi}
\title{Get file from dataverse and convert it into a dataframe or tibble}
\usage{
get_dataframe_by_name(file, dataset = NULL, FUN = NULL, archival = FALSE, ...)

get_dataframe_by_id(fileid, FUN = NULL, archival = FALSE, ...)

get_dataframe_by_doi(filedoi, FUN = NULL, archival = FALSE, ...)
}
\arguments{
\item{file}{to be passed on to get_file}

\item{dataset}{to be passed on to get_file}

\item{FUN}{The function to used for reading in the raw dataset. This user
must choose the appropriate funuction: for example if the target is a .rds
file, then \code{FUN} should be \code{readRDS} or \code{readr::read_rds}.}

\item{archival}{Whether to read from the ingested, archival version of the
dataset, or whether to read the original. The archival versions are tab-delimited
\code{.tab} files. If functions to read the original version is available without
loss of information, then \code{archival = FALSE} is better. If such functions
are not available or the original format is unknown, use \code{archival = TRUE}.}

\item{...}{
  Arguments passed on to \code{\link[=get_file]{get_file}}
  \describe{
    \item{\code{format}}{A character string specifying a file format for download.
by default, this is \dQuote{original} (the original file format). If \code{NULL},
no query is added, so ingested files are returned in their ingested TSV form.
For tabular datasets, the option \dQuote{bundle} downloads the bundle
of the original and archival versions, as well as the documentation.
See \url{https://guides.dataverse.org/en/latest/api/dataaccess.html} for details.}
    \item{\code{vars}}{A character vector specifying one or more variable names, used to
extract a subset of the data.}
    \item{\code{key}}{A character string specifying a Dataverse server API key. If one
is not specified, functions calling authenticated API endpoints will fail.
Keys can be specified atomically or globally using
\code{Sys.setenv("DATAVERSE_KEY" = "examplekey")}.}
    \item{\code{server}}{A character string specifying a Dataverse server. There are
multiple Dataverse installations, but the defaults is to use the Harvard
Dataverse (\code{server = "dataverse.harvard.edu"}). This can be modified atomically
or globally using \code{Sys.setenv("DATAVERSE_SERVER" = "dataverse.example.com")}.}
  }}

\item{fileid}{A numeric ID internally used for \code{get_file_by_id}}

\item{filedoi}{A DOI for a single file (not the entire dataset), of the form
\code{"10.70122/FK2/PPKHI1/ZYATZZ"} or \code{"doi:10.70122/FK2/PPKHI1/ZYATZZ"}}
}
\description{
\code{get_dataframe_by_id}, if you know the numeric ID of the dataset, or instead
\code{get_dataframe_by_name} if you know the filename and doi. The dataset
}
\examples{
library(readr)

gap_df <- get_dataframe_by_name(
  file = "gapminder-FiveYearData.tab",
  dataset = "doi:10.70122/FK2/PPKHI1",
  server = "demo.dataverse.org",
  FUN = read_csv)

# or a Stata dta
stata_df <- get_dataframe_by_name(
  file = "nlsw88.tab",
  dataset = "doi:10.70122/FK2/PPKHI1",
  server = "demo.dataverse.org",
  FUN = haven::read_dta)

# or a Rds file
rds_df <- get_dataframe_by_name(
 file = "nlsw88_rds-export.rds",
 dataset = "doi:10.70122/FK2/PPKHI1",
 server = "demo.dataverse.org",
 FUN = read_rds)

# equivalently, if you know the DOI
gap_df <- get_dataframe_by_doi(
 filedoi = "10.70122/FK2/PPKHI1/ZYATZZ",
 server = "demo.dataverse.org",
 FUN = read_csv
)

# or the id
# you can also customize the FUN (in this case to supress parse msg)
gap_df <- get_dataframe_by_id(
  1733998,
  server = "demo.dataverse.org",
  FUN = function(x) read_csv(x, col_types = cols()))

# equivalently, using a dataverse object
gap_ds <- dataset_files("doi:10.70122/FK2/PPKHI1",
                        server = "demo.dataverse.org")

gap_df <- get_dataframe_by_id(
  gap_ds[[1]],
  server = "demo.dataverse.org",
  FUN = function(x) read_csv(x, col_types = cols()))

# to use the archival version (and read as TSV)
gap_df <- get_dataframe_by_id(
  1733998,
  server = "demo.dataverse.org",
  archival = TRUE,
  FUN = function(x) read_tsv(x, col_types = cols()))


}
